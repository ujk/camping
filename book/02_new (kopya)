= Başlangıç

Yeni bir text dosya açın ve nuts.rb adını verin. İçin de şunu yazın:
 
  Camping.goes :Nuts

Kaydedin , sonra komut satırında şunu girin:

  $ camping nuts.rb

Şöyle bir mesaj almalısınız:

  ** Camping running on 0.0.0.0:3301.

Bunun anlamı, Camping server şimdi makinanızın 3301 portunda çalışmaya başladı.
Tarayıcınızı açın ve http://localhost:3301/ adresine gidin.

Tarayıcı penceresinde şunu gösterir:

  Camping Problem!
  
  / Not found

Burada bir hata yok. Camping server çalışıyor ama size ne göstereceğini bilmiyor. Öyleyse kendisine öğretelim.

== Merhaba Saat

Peki, Camping kurulu ve çalışıyor. Çalışır durumda tutun, Camping server çalışırken dosyalarda düzenleme yapabilirsiniz,
 otomatik olarak yüklenecektir. Server'ı durdurmak isterseniz Control-C basın.

Hadi bişeyler gösterelim. nuts.rb dosyası alt kısmına şunu ekleyin:

  module Nuts::Controllers
    class Index < R '/'
      def get
        Time.now.to_s
      end
    end
  end

Dosyayı saklayın ve tarayıcı penceresini tazeleyin. Tarayıcınız zamanı gösterecektir, şöyle bişey.

  Sun Jul 15 12:56:15 +0200 2007

== Görseli Düzenlemek

Camping microframework kodumuzu MVC (Model-View-Controller) paternine uygun parçalamamıza olanak sağlar
Haydi Nuts uyuglamamıza bir görsel ekleyelim. <tt>module Nuts::Controllers</tt>'i şöyle değiştirin:

  module Nuts::Controllers
    class Index < R '/'
      def get
        @time = Time.now
        render :sundial
      end
    end
  end

  module Nuts::Views
    def layout
      html do
        head do
          title { "Nuts And GORP" }
        end
        body { self << yield }
      end
    end

    def sundial
      p "The current time is: #{@time.strftime('%H:%M:%S')}"
    end
  end
  
Dosyayı kaydedip tarayıcınızda sayfayı tazeleyin. Şöyle bir mesaj çıkacaktır:

   The current time is: 13:05:41

Ve sayfamızın title barında şimdi "Nuts And GORP" yazıyor.

Burda gördüğünüz gibi kontrolörümüzden <tt>render :sundial</tt> komutunu veriyoruz.
Bu aynen anlaşıldığı manaya geliyor, <tt>sundial</tt> metodu çıktısını yayınlıyor.
Ayrıca <tt>layout</tt> adında özel bir metod da çağırdık, adından da anlaşıldığı gibi
bu sayfanın yerleşim kalıbı oluyor ve markaby formatında bizim sundial metod çıktımız
bunun içinde gösteriliyor. Eğer HTML ile haşır neşirseniz görseldeki ifadelerin HTML
tag isimlerine benzerliğini farketmişsinizdir. Bu yapı HTML'i Ruby kullanarak yazmayı
sağlayan Markaby yapısıdır. Zaten Markaby gem yüklü olmadan Camping server çalıştırırsanız
bu sayfayı göstermeye kalktığınızda Markaby gem yüklü olmadığını belirten bir hata mesajı
alırsınız, bu durumda klasik "sudo gem install markaby" ile yüklemelisiniz!

Gördüğünüz gibi kontrolör üzerinden herhangibir şeyi cevap olarak dönebilirsiniz ve
bu cevap tarayıcınıza gönderilir. Fakat buna daha sonra dönelim ve routing (yönlendirme)
yapılarını inceleyelim.

== Yönlendirmeler

Büyük ihtimal önceki sayfadaki acayip <tt>R '/'</tt> deyimini farkettiniz.
Bu Ruby'nin bizim microframework'umuzda kullanılan ve kontrolöre nasıl erişileceğini
belirten yönlendirmelerin standart dışı bir ifadesi.

Bu yönlendirmeler çok güçlüdürler ama biz şimdi en basitinden başlayacağız.

  module Nuts::Controllers
    # localhost:3301/welcome/yo/my/site adresi
    class Words < R '/welcome/to/my/site'
      def get
        "You got here by: /welcome/to/my/site"
      end
    end
    
    # localhost:3301/nuts/1 veya nuts/234 vs. sayı metoda parametre oluyor
    class Digits < R '/nuts/(\d+)'
      def get(number)
        "You got here by: /nuts/#{number}"
      end
    end

    # slash ( / ) içermeyen herşeyi seçmek
    class Segment < R '/gorp/([^/]+)'
      def get(everything_else_than_a_slash)
        "You got here by: /gorp/#{everything_else_than_a_slash}"
      end
    end
    
    # bir sayı arkasından herşey (localhost:3301/5/hasan gibi)
    class DigitsAndEverything < R '/nuts/(\d+)/([^/]+)'
      def get(number, everything)
        "You got here by: /nuts/#{number}/#{everything}"
      end
    end
  end
  
Bunları nuts.rb dosyasına ekleyin ve tüm kontrolörlere ulaştığınızı test edin.

Ayrıca dikkat ettiyseniz parantez içinde tanımlanan şeyler metoda parametre olarak
aktarılıyor ve istediğiniz gibi kullanabilirsiniz.

=== Basit (ama akıllı) Yönlendirmeler

Bir de şunları deneyin:

  module Nuts::Controllers
    class Index
      def get
        "You got here by: /"
      end
    end
    
    class WelcomeToMySite
      def get
        "You got here by: /welcome/to/my/site"
      end
    end
    
    class NutsN
      def get(number)
        "You got here by: /nuts/#{number}"
      end
    end
    
    class GorpX
      def get(everything_else_than_a_slash)
        "You got here by: /gorp/#{everything_else_than_a_slash}"
      end
    end
    
    class NutsNX
      def get(number, everything)
        "You got here by: /nuts/#{number}/#{everything}"
      end
    end
  end
  
<tt>< R</tt>-parçasını çıkarınca sistem aklınızdan geçeni okumaya başlar. Her zaman
başarılı olamasa da uygulamanızı ne kadar basitleştiriyor gördünüz.

== dünyayı modellemek 

Bu kadar oyun sonrasında şimdi verilerin nasıl saklanacağı konusuna gelelim

Baştan başlıyoruz.

  Camping.goes :Nuts

  module Nuts::Models
    class Page < Base
    end
  end
  
açıkça belli ki bu hiç birşey yapmıyor, çünkü bir kontrolörümüz yok ama önce 
neler yaptığımızı bir inceleyelim.

Page adında bir modelimiz oldu. Bunun anlamı artık wiki sayfaları kaydedip 
yayınlayabiliriz. Gerçekte istediğimiz kadar modelimiz olabilir. Bir tane 
kullanıcılar için bir tane blog gönderileriniz için olabilir mesela? 
Pekala Rails nilenler bunu nasıl yapacaklarını biliyordur.

Binananazalik modelimizin bişeyi eksik: iskeleti.
  
  Camping.goes :Nuts
  
  module Nuts::Models
    class Page < Base
    end
  
    class BasicFields < V 1.0
      def self.up
        create_table Page.table_name do |t|
          t.string :title
          t.text :content
          # bu satır ile created_at ve updated_at bilgileri eklenir
          t.timestamps
        end
      end
  
      def self.down
        drop_table Page.table_name
      end
    end
  end
  
Şimdi modelimizin ilk versiyonu hazır. Şöyle diyor:

  Eğer versiyon 1.0'a migrate istersen,
    Page modeli için iskeleti oluştur,
    şu verileri sklamak için,
      "title" string değeri,
      "content" text değeri,
      "created_at" kaydın üretildiği zamanın değeri,
      "updated_at" kaydın en son değiştirildiği zaman değeri.
    
  Eğer versiyon 1.0'dan geri dönmek istersen,
    Page modelinin iskeletini sil.
    
Buna _migration_ denir. Ne zaman bir modeli değiştirme ya da yenisini 
eklemek isterseniz altına bir migration ekleyin ve versiyon numarasını 
artırın. Tüm bu migrationlar sırayla lego gibi işlenir. 

Şimdi Camping'e bizim migrationumuzu kullanmasını öğreteceğiz. En alta şunu 
yazın : 

  def Nuts.create
    Nuts::Models.create_schema
  end

Camping server çalıştırdığınızda otomatik olarak <tt>Nuts.create</tt> 
çağrılır. Tüm startup kodları buraya koyabilirsiniz, ama biz şimdilik sadece 
iskeletimizi üreten kodu koyacağız. Camping çalıştırınca şunu görürsünüz:
  
  $ camping nuts.rb
  ** Starting Mongrel on 0.0.0.0:3301
  -- create_table("nuts_schema_infos")
     -> 0.1035s
  == Nuts::Models::BasicFields: migrating ===================================
  -- create_table(:nuts_pages)
     -> 0.0033s
  == Nuts::Models::BasicFields: migrated (0.0038s) ==========================
  
Tekrar durdurup çalıştırırsanız hiç birşey gelmez. Çünkü iskeletimiz 
oluşturuldu veri tabanında tablolar eklendi.

Devam etmeden önce şunu hatırlatalım modellerin herzaman migrationların 
öncesinde tanımlanması gerekir.

== Modelimizi kullanalım

Haydi _konsol_ ile modelimizin nasıl çalıştığını görelim

  $ camping -C nuts.rb
  ** Starting console
  >>
  
Now it's waiting for your input, and will give you the answer when you press
Enter. Here's what I did, leaving out the boring answers. You should add your
own pages.

  >> Page = Nuts::Models::Page
  
  >> hiking = Page.new(:title => "Hiking")
  >> hiking.content = "Değerleri böyle de girebilirsiniz."
  >> hiking.save

  >> page = Page.find_by_title("Hiking")
  => #<Nuts::Models::Page id: 1, ... >
  >> page = Page.find(1)
  => #<Nuts::Models::Page id: 1, ... >
  >> page.title
  >> page.content
  >> page.created_at
  >> page.updated_at
  
  >> Page.find_by_title("Fishing")
  => nil
  
  ## Page.create kaydı otomatik olarak kaydeder.
  >> Page.create(:title => "Fishing", :content => "Go fish!")
  
  >> Page.count
  => 2
  
Şimdi 2 sayfamız var: Birinin başlığı hiking diğerinin Fishing.

== Wrapping it up

Wouldn't it be nice if we could show this wonderful our pages in a browser?
Update nuts.rb so it also contains something like this:

  module Nuts::Controllers
    class Pages
      def get
        # Only fetch the titles of the pages.
        @pages = Page.all(:select => "title")
        render :list
      end
    end
    
    class PageX
      def get(title)
        @page = Page.find_by_title(title)
        render :view
      end
    end
  end

  module Nuts::Views
    def list
      h1 "All pages"
      ul do
        @pages.each do |page|
          li do
            a page.title, :href => R(PageX, page.title)
          end
        end
      end
    end

    def view
      h1 @page.title
      self << @page.content
    end
  end
  
Here we meet our first _helper_:

  R(PageX, page.title)
  
This is the <em>reversed router</em> and it generates a URL based on a
controller. Camping ships with a few, but very useful, helpers and you can
easily add your owns. Have a look at Camping::Helpers for how you use these.
  
There's a lot of improvements you could do here. Let me suggest:

* Show when the page was created and last updated.
* What happens when the page doesn't exist?
* What should the front page show?
* Add a layout.
* Jazz it up a bit.
 
== The last touch

We have one major flaw in our little application. You can't edit or add new
pages. Let's see if we can fix that:

  module Nuts::Controllers
    class PageX
      def get(title)
        if @page = Page.find_by_title(title)
          render :view
        else
          redirect PageXEdit, title
        end
      end
      
      def post(title)
        # If it doesn't exist, initialize it:
        @page = Page.find_or_initialize_by_title(title)
        # This is the same as:
        # @page = Page.find_by_title(title) || Page.new(:title => title)
        
        @page.content = @input.content
        @page.save
        redirect PageX, title
      end
    end
    
    class PageXEdit
      def get(title)
        @page = Page.find_or_initialize_by_title(title)
        render :edit
      end
    end
  end
  
The core of this code lies in the new <tt>post</tt> method in the PageX
controller. When someone types an address or follows a link, they'll end up at
the <tt>get</tt> method, but you can easily create a form which rather sends
you to the <tt>post</tt> when submitted.

There are other names you can use, but they won't always work. So for now,
don't be fancy and just stick to <tt>get</tt> and <tt>post</tt>. We'll show
you how this really works later.

You might also notice that we use <tt>@input.content</tt>. The
<tt>@input</tt>-hash contains any extra parameters sent, like those in the
forms and those in the URL (<tt>/posts?page=50</tt>).

Here's an <tt>edit</tt>-view, but you can probably do better. See if you can
integrate all of this with what you already have.
  
  module Nuts::Views
    def edit
      h1 @page.title
      form :action => R(PageX, @page.title), :method => :post do
        textarea @page.content, :name => :content,
          :rows => 10, :cols => 50

        br
        
        input :type => :submit, :value => "Submit!"
      end
    end
  end
  

== Phew.

You've taken quite a few steps in the last minutes. You deserve a break. But
let's recap for a moment:

* Always place <tt>Camping.goes :App</tt> at the top of your file.
* Every route ends at a controller, but ...
* ... the controller only delegates the work.
* <tt>@input</tt> contains the extra parameters.
* The views are HTML disguised as Ruby.
* They can access the instances variables (those that starts with a single
  at-sign) from the controller.
* The models allows you to store all kinds of data.
* Place your models before your migrations.
* Helpers are helpful.

Unfortunately, the book stops here for now. Come back in a few months, or join
the mailing list to stay updated, and hopefully there's another chapter
waiting for you.



